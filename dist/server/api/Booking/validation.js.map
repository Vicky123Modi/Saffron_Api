{"version":3,"sources":["api/Booking/validation.js"],"names":["validateAuthorization","req","res","next","authorizationHeader","headers","token","headerParts","trim","split","toLowerCase","length","statusCode","status","json","user_msg","dev_msg","verify","jwtSecretKey","err","decoded","user","role","validateAdminEmployeeAuthorization","validateAuthorizationUser","newBookingOrder","body","startTime","object","hours","number","required","minutes","endTime","updateBookingOrder","orderType","string"],"mappings":"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","file":"validation.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport {jwtdata} from '../../config/commonHelper';\nimport Joi from 'joi';\n\nexport default {\n    // route middleware to verify a token\n    validateAuthorization: function (req, res, next) {\n        // check header or url parameters or post parameters for token\n        var authorizationHeader = req.headers['authorization'];\n        var token = '';\n        if (authorizationHeader) {\n            var headerParts = authorizationHeader.trim().split(' ');\n            if (headerParts[0].toLowerCase() === 'bearer') {\n                token = headerParts[headerParts.length - 1];\n            }\n            else {\n                var statusCode = 401;\n                return res.status(statusCode).json({\n                    user_msg: 'Failed to authenticate token.',\n                    dev_msg: 'Failed to authenticate token.',\n                });\n            }\n        }\n\n        // decode token\n        if (token) {\n            // verifies secret and checks exp\n            jwt.verify(token, jwtdata.jwtSecretKey, function (err, decoded) {\n                if (err) {\n                    var statusCode = 401;\n                    return res.status(statusCode).json({\n                        user_msg: 'Failed to authenticate token.',\n                        dev_msg: 'Failed to authenticate token.',\n                    });\n                } else {\n                    // if everything is good, save to request for use in other routes\n                    if (decoded.user.role === \"Admin\") {\n                        req.decoded = decoded;\n                        next();\n                    } else {\n                        var statusCode = 403;\n                        return res.status(statusCode).json({\n                            user_msg: 'UnAuthorized user.',\n                            dev_msg: 'UnAuthorized user.',\n                        });\n                    }\n                }\n            });\n        } else {\n            // if there is no token\n            // return an error\n            var statusCode = 401;\n            return res.status(statusCode).json({\n                user_msg: 'No token provided.',\n                dev_msg: 'No token provided.',\n            });\n        }\n    },\n\n    validateAdminEmployeeAuthorization: function (req, res, next) {\n        // check header or url parameters or post parameters for token\n        var authorizationHeader = req.headers['authorization'];\n        var token = '';\n        if (authorizationHeader) {\n            var headerParts = authorizationHeader.trim().split(' ');\n            if (headerParts[0].toLowerCase() === 'bearer') {\n                token = headerParts[headerParts.length - 1];\n            }\n            else {\n                var statusCode = 401;\n                return res.status(statusCode).json({\n                    user_msg: 'Failed to authenticate token.',\n                    dev_msg: 'Failed to authenticate token.',\n                });\n            }\n        }\n\n        // decode token\n        if (token) {\n            // verifies secret and checks exp\n            jwt.verify(token, jwtdata.jwtSecretKey, function (err, decoded) {\n                if (err) {\n                    var statusCode = 401;\n                    return res.status(statusCode).json({\n                        user_msg: 'Failed to authenticate token.',\n                        dev_msg: 'Failed to authenticate token.',\n                    });\n                } else {\n                    // if everything is good, save to request for use in other routes\n                    if (decoded.user.role.toLowerCase() === \"Admin\" || decoded.user.role.toLowerCase() === \"employee\") {\n                        req.decoded = decoded;\n                        next();\n                    } else {\n                        var statusCode = 403;\n                        return res.status(statusCode).json({\n                            user_msg: 'UnAuthorized user.',\n                            dev_msg: 'UnAuthorized user.',\n                        });\n                    }\n                }\n            });\n        } else {\n            // if there is no token\n            // return an error\n            var statusCode = 401;\n            return res.status(statusCode).json({\n                user_msg: 'No token provided.',\n                dev_msg: 'No token provided.',\n            });\n        }\n    },\n\n\n    validateAuthorizationUser: function (req, res, next) {\n        // check header or url parameters or post parameters for token\n        var authorizationHeader = req.headers['authorization'];\n        var token = '';\n        if (authorizationHeader) {\n            var headerParts = authorizationHeader.trim().split(' ');\n            if (headerParts[0].toLowerCase() === 'bearer') {\n                token = headerParts[headerParts.length - 1];\n            }\n            else {\n                var statusCode = 401;\n                return res.status(statusCode).json({\n                    user_msg: 'Failed to authenticate token.',\n                    dev_msg: 'Failed to authenticate token.',\n                });\n            }\n        }\n\n        // decode token\n        if (token) {\n            // verifies secret and checks exp\n            jwt.verify(token, jwtdata.jwtSecretKey, function (err, decoded) {\n                if (err) {\n                    var statusCode = 401;\n                    return res.status(statusCode).json({\n                        user_msg: 'Failed to authenticate token.',\n                        dev_msg: 'Failed to authenticate token.',\n                    });\n                } else {\n                    // if everything is good, save to request for use in other routes\n                    req.decoded = decoded;\n                    next();\n                }\n            });\n        } else {\n            // if there is no token\n            // return an error\n            var statusCode = 401;\n            return res.status(statusCode).json({\n                user_msg: 'No token provided.',\n                dev_msg: 'No token provided.',\n            });\n        }\n    },\n\n\n    newBookingOrder: {\n        body: {\n            startTime: Joi.object({\n                hours: Joi.number().required(),\n                minutes: Joi.number().required(),\n            }).required(),\n            endTime: Joi.object({\n                hours: Joi.number().required(),\n                minutes: Joi.number().required(),\n            }).required(),\n        }\n    },\n\n\n    updateBookingOrder :{\n        body: {\n            orderType: Joi.string().required()\n        }\n    }\n\n\n};\n"]}