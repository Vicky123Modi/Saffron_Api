{"version":3,"sources":["api/Booking/Booking.controller.js"],"names":["req","res","startTimeHours","body","startTime","hours","startTimeMinutes","minutes","endTimeHours","endTime","endTimeMinutes","bookingProduct","totalTime","allProductFound","userId","decoded","user","fullName","first_name","last_name","bookingStartDateTime","bookingEndDateTime","momentDateTime","moment","tz","format","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","NormalStartDateTime","NormalEndDateTime","totalPrice","not_acceptAble","getHours","all","map","singleBookingProduct","TeamMemberProductSingle","getTeamMemberProductList","product_id","teamMember_id","ProductItem","getProduct","price","approxTime","message","status","json","getTime","_LastBooking","getLastBookingOrder","visited","lastBookingDateTimeCalculation","bookingEndTime","addMinute","setMinutes","getMinutes","toUTCString","currentTimeWithZeroMinutes","diffTime","Math","abs","diffMinutes","ceil","BasketResponseGenerator","BasketGenerator","BookingAdd","id","customer_id","basket","basketResponse","teamWiseProductList","total","bookingDateTime","bookingStartTime","column","customerName","statusDateTime","save","then","InsertBooking","err","responseObject","productList","arrivalTime","_id","BookingItemsAdd","booking_id","team_id","active","InsertBookingItems","singleObject","publishMessage","data","orderPlace","error","console","log","index","bookingItem","productItem","productTeam","getTeam","object","push","teamMember","find","pushData","orderStatus","productId","listProductList","singleProduct","product","__v","description","sex","exec","_LastBookingOrder","findOneAndUpdate","$gte","$lte","$set","sort","teamId","teamList","singleTeam","team","teamMemberProductList","singleTeamMemberProduct","teamMemberProduct","startDayDateTime","startOf","endDayDateTime","endOf","NormalDateStartDateTime","NormalDateEndDateTime","runningOrder","runningLate","recentOrders","runningOrders","lateOrders","getBookingOrder","orderId","params","orderType","currentTime","updateResult","update","nModified","n","sodPublishMessage","_singleLateBooking","findOne","forEach","singleTeamWiseProductList","result","updateBookingOrder","teamMemberId","$elemMatch","getTeamMemberBookingOrder","require","_"],"mappings":"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","file":"Booking.controller.js","sourcesContent":["import Booking from './Booking.model';\nimport TeamMemberProduct from '../TeamMemberProduct/TeamMemberProduct.model';\nimport Product from '../Product/Product.model';\nimport BookingItems from '../BookingItems/BookingItems.model';\nimport Team from '../Team/Team.model';\n\nimport {jwtdata, errorJsonResponse, getGuid, setCache, getCache} from '../../config/commonHelper';\nimport {socketPublishMessage} from '../Socket/index';\n\nlet moment = require('moment-timezone');\nvar _ = require('lodash');\n\n// New Booking\nexport async function index(req, res) {\n    try {\n        let startTimeHours = req.body.startTime.hours;\n        let startTimeMinutes = req.body.startTime.minutes;\n        let endTimeHours = req.body.endTime.hours;\n        let endTimeMinutes = req.body.endTime.minutes;\n        let bookingProduct = req.body.bookingProduct;\n        let totalTime = 0;\n        let allProductFound = true;\n        let userId = req.decoded.user.userId;\n        let fullName = req.decoded.user.first_name + ' ' + req.decoded.user.last_name;\n        let bookingStartDateTime = '';\n        let bookingEndDateTime = '';\n        let momentDateTime = moment()\n            .tz('Asia/Kolkata')\n            .format();\n        let currentDate = new Date(momentDateTime);\n        let year = currentDate.getFullYear();\n        let month = currentDate.getMonth();\n        let date = currentDate.getDate();\n        let NormalStartDateTime = new Date(year, month, date, startTimeHours, startTimeMinutes, 0);\n        let NormalEndDateTime = new Date(year, month, date, endTimeHours, endTimeMinutes, 0);\n        let totalPrice = 0;\n        let not_acceptAble = false;\n\n        if(currentDate.getHours() >= 7) {\n\n            //Calculate the total time\n            await Promise.all(bookingProduct.map(async(singleBookingProduct) => {\n                let TeamMemberProductSingle = await getTeamMemberProductList(singleBookingProduct.product_id, singleBookingProduct.teamMember_id);\n\n                let ProductItem = await getProduct(singleBookingProduct.product_id);\n\n                if(ProductItem !== null) {\n                    totalPrice += ProductItem.price;\n                } else {\n                    allProductFound = false;\n                }\n\n                if(TeamMemberProductSingle !== null) {\n                    totalTime += TeamMemberProductSingle.approxTime;\n                } else {\n                    allProductFound = false;\n                }\n\n            }));\n\n            if(!allProductFound) {\n                let message = 'your order has been canceled, so please restart your application and place the booking again. we are sorry for this trouble.';\n                res.status(400)\n                    .json(errorJsonResponse(message, message));\n            } else {\n\n                //check currentTime and booking selected time.\n                if(currentDate.getTime() < NormalEndDateTime.getTime()) {\n\n                    let _LastBooking = await getLastBookingOrder(NormalStartDateTime, NormalEndDateTime);\n\n                    if(_LastBooking !== null && _LastBooking.visited === false) {\n\n                        //Get Booking LastTime\n                        let lastBookingDateTimeCalculation = moment.tz(_LastBooking.bookingEndTime, 'Asia/Kolkata')\n                            .format();\n                        let addMinute = new Date(lastBookingDateTimeCalculation);\n                        if(currentDate.getTime() < addMinute.getTime()) {\n                            addMinute.setMinutes(addMinute.getMinutes() + totalTime);\n                            //set arrivalTime\n                            bookingStartDateTime = new Date(_LastBooking.bookingEndTime).toUTCString();\n                            //set order finish time.\n                            bookingEndDateTime = addMinute.toUTCString();\n                        } else {\n                            let currentTimeWithZeroMinutes = new Date(year, month, date, currentDate.getHours(), currentDate.getMinutes(), 0);\n                            bookingStartDateTime = currentTimeWithZeroMinutes.toUTCString();\n                            addMinute = currentTimeWithZeroMinutes;\n                            addMinute.setMinutes(currentTimeWithZeroMinutes.getMinutes() + totalTime);\n                            bookingEndDateTime = addMinute.toUTCString();\n                        }\n\n                        const diffTime = Math.abs(NormalEndDateTime.getTime() - addMinute.getTime());\n                        const diffMinutes = Math.ceil(diffTime / (1000 * 60));\n                        if(!((NormalEndDateTime.getTime() >= addMinute.getTime()) && diffMinutes >= 0)) {\n                            not_acceptAble = true;\n                        }\n\n                    } else {\n\n                        //Never execute this part.\n                        //first order set stating time and add minutes and generate end time\n                        if(currentDate.getTime() < NormalStartDateTime.getTime()) {\n                            bookingStartDateTime = NormalStartDateTime.toUTCString();\n                            let addMinute = NormalStartDateTime;\n                            addMinute.setMinutes(NormalStartDateTime.getMinutes() + totalTime);\n                            bookingEndDateTime = addMinute.toUTCString();\n                        } else {\n                            bookingStartDateTime = currentDate.toUTCString();\n                            let addMinute = currentDate;\n                            addMinute.setMinutes(currentDate.getMinutes() + totalTime);\n                            bookingEndDateTime = addMinute.toUTCString();\n                        }\n                    }\n\n                    if(!not_acceptAble) {\n                        //Generate the Basket Response.\n                        let BasketResponseGenerator = await BasketGenerator(bookingProduct);\n\n\n                        let BookingAdd = new Booking({\n                            id: getGuid(),\n                            customer_id: userId,\n                            basket: BasketResponseGenerator.basketResponse,\n                            teamWiseProductList: BasketResponseGenerator.teamWiseProductList,\n                            total: totalPrice,\n                            bookingDateTime: currentDate.toUTCString(),\n                            bookingStartTime: bookingStartDateTime,\n                            bookingEndTime: bookingEndDateTime,\n                            status: 'waiting',\n                            column: 'recent orders',\n                            customerName: fullName,\n                            visited: false,\n                            statusDateTime: currentDate.toUTCString()\n                        });\n                        BookingAdd.save()\n                            .then(async function(InsertBooking, err) {\n                                if(!err) {\n                                    if(InsertBooking) {\n                                        let responseObject = {\n                                            id: InsertBooking.id,\n                                            customer_id: InsertBooking.customer_id,\n                                            customerName: fullName,\n                                            productList: InsertBooking.basket,\n                                            total: InsertBooking.total,\n                                            bookingDateTime: moment.tz(InsertBooking.bookingDateTime, 'Asia/Kolkata')\n                                                .format(),\n                                            arrivalTime: moment.tz(InsertBooking.bookingStartTime, 'Asia/Kolkata')\n                                                .format(),\n                                            bookingEndTime: moment.tz(InsertBooking.bookingEndTime, 'Asia/Kolkata')\n                                                .format(),\n                                            status: InsertBooking.status,\n                                            column: InsertBooking.column,\n                                            statusDateTime: moment.tz(InsertBooking.statusDateTime, 'Asia/Kolkata')\n                                                .format(),\n                                            _id: InsertBooking._id\n                                        };\n\n                                        //ProductItemStore into BookingItem Collection.\n                                        await Promise.all(bookingProduct.map(async(singleBookingProduct) => {\n                                            let BookingItemsAdd = new BookingItems({\n                                                id: getGuid(),\n                                                booking_id: InsertBooking.id,\n                                                product_id: singleBookingProduct.product_id,\n                                                team_id: singleBookingProduct.teamMember_id,\n                                                active: true,\n                                            });\n                                            BookingItemsAdd.save()\n                                                .then(async function(InsertBookingItems, err) {\n                                                    if(!err) {\n                                                        if(!InsertBookingItems) {\n                                                            res.status(400)\n                                                                .json(errorJsonResponse('Error in db BookingItems response', 'Error in db BookingItems response'));\n                                                        }\n                                                    } else {\n                                                        res.status(400)\n                                                            .json(errorJsonResponse(err, 'Contact to your Developer'));\n                                                    }\n                                                });\n                                        }));\n\n                                        //ToDO send to TeamMember\n                                        BasketResponseGenerator.teamWiseProductList.map(async(singleObject) => {\n                                            let publishMessage = {\n                                                message: 'new order',\n                                                data: {\n                                                    _id: InsertBooking._id,\n                                                    id: InsertBooking.id,\n                                                    customer_id: InsertBooking.customer_id,\n                                                    customerName: fullName,\n                                                    basket: singleObject.productList,\n                                                    total: InsertBooking.total,\n                                                    bookingDateTime: InsertBooking.bookingDateTime,\n                                                    bookingStartTime: InsertBooking.bookingStartTime,\n                                                    bookingEndTime: InsertBooking.bookingEndTime,\n                                                    status: InsertBooking.status,\n                                                    column: InsertBooking.column,\n                                                    statusDateTime: InsertBooking.statusDateTime,\n                                                }\n                                            };\n                                            await socketPublishMessage(singleObject.id, publishMessage);\n                                        });\n\n                                        //ToDO send to SOD\n                                        let publishMessage = {\n                                            message: 'new order',\n                                            data: {\n                                                _id: InsertBooking._id,\n                                                id: InsertBooking.id,\n                                                customer_id: InsertBooking.customer_id,\n                                                customerName: fullName,\n                                                basket: InsertBooking.basket,\n                                                //teamWiseProductList: BasketResponseGenerator.teamWiseProductList,\n                                                total: InsertBooking.total,\n                                                bookingDateTime: InsertBooking.bookingDateTime,\n                                                bookingStartTime: InsertBooking.bookingStartTime,\n                                                bookingEndTime: InsertBooking.bookingEndTime,\n                                                status: InsertBooking.status,\n                                                column: InsertBooking.column,\n                                                statusDateTime: InsertBooking.statusDateTime,\n                                            }\n                                        };\n\n                                        await socketPublishMessage('SOD', publishMessage);\n\n                                        res.status(200)\n                                            .json({\n                                                totalTime,\n                                                orderPlace: responseObject\n                                            });\n\n                                    } else {\n                                        res.status(400)\n                                            .json(errorJsonResponse('Error in db response', 'Error in db response'));\n                                    }\n                                } else {\n                                    res.status(400)\n                                        .json(errorJsonResponse(err, 'Contact to your Developer'));\n                                }\n                            });\n                    } else {\n                        res.status(406)\n                            .json(errorJsonResponse('your order is not Accepted, please select another time slot and book your order', 'your order is not Accepted, please select another time slot and book your order'));\n                    }\n                } else {\n                    let message = 'you have selected wrong time, please choose the valid time slot.';\n                    res.status(400)\n                        .json(errorJsonResponse(message, message));\n                }\n            }\n\n        } else {\n            let message = 'Booking will be started at 7 am';\n            res.status(400)\n                .json(errorJsonResponse(message, message));\n        }\n    } catch(error) {\n        console.log(error);\n    }\n}\n\nasync function BasketGenerator(bookingProduct) {\n    try {\n\n        let basketResponse = [];\n        let teamWiseProductList = [];\n\n        await Promise.all(bookingProduct.map(async(bookingItem) => {\n\n            let productItem = await getProduct(bookingItem.product_id);\n            let productTeam = await getTeam(bookingItem.teamMember_id);\n            let object = {\n                productItem,\n                productTeam\n            };\n            basketResponse.push(object);\n\n            let teamMember = teamWiseProductList.find((teamMember) => teamMember.id === productTeam.id);\n            if(!teamMember) {\n                let pushData = {\n                    id: productTeam.id,\n                    productList: [],\n                    orderStatus: false,\n                };\n                pushData.productList.push(productItem);\n                teamWiseProductList.push(pushData);\n            } else {\n                teamMember.productList.push(productItem);\n            }\n        }));\n\n        return {basketResponse, teamWiseProductList};\n\n    } catch(error) {\n        console.log(error);\n        return error;\n    }\n}\n\nasync function getProduct(productId, index = 0) {\n    let listProductList = getCache('productList');\n    if(listProductList !== null) {\n        let singleProduct = listProductList.find((product) => product.id === productId);\n        if(singleProduct) {\n            return singleProduct;\n        } else {\n            if(index === 0) {\n                return getProduct(productId, 1);\n            } else {\n                return null;\n            }\n        }\n    } else {\n        listProductList = await Product.find({}, {_id: 0, __v: 0, description: 0, date: 0, sex: 0})\n            .exec();\n        setCache('productList', listProductList);\n        return getProduct(productId, 1);\n    }\n}\n\nasync function getLastBookingOrder(NormalStartDateTime, NormalEndDateTime) {\n\n    let _LastBookingOrder = await Booking.findOneAndUpdate({\n        visited: false,\n        bookingEndTime: {$gte: NormalStartDateTime.toUTCString(), $lte: NormalEndDateTime.toUTCString()}\n    }, {$set: {visited: true}}, {sort: {bookingEndTime: -1}})\n        .exec();\n\n    if(_LastBookingOrder === null)\n    //Todo should not be received null value\n    {\n        return getLastBookingOrder(NormalStartDateTime, NormalEndDateTime);\n    } else if(_LastBookingOrder.visited === true) {\n        return getLastBookingOrder(NormalStartDateTime, NormalEndDateTime);\n    } else {\n        return _LastBookingOrder;\n    }\n}\n\nasync function getTeam(teamId, index = 0) {\n    let teamList = getCache('teamList');\n    if(teamList !== null) {\n        let singleTeam = teamList.find((team) => team.id === teamId);\n        if(singleTeam) {\n            return singleTeam;\n        } else {\n            if(index === 0) {\n                return getTeam(teamId, 1);\n            } else {\n                return null;\n            }\n        }\n    } else {\n        teamList = await Team.find({}, {_id: 0, __v: 0, description: 0})\n            .exec();\n        setCache('teamList', teamList);\n        return getTeam(teamId, 1);\n    }\n}\n\nasync function getTeamMemberProductList(product_id, teamMember_id, index = 0) {\n    let teamMemberProductList = getCache('teamMemberProductList');\n    if(teamMemberProductList !== null) {\n        let singleTeamMemberProduct = teamMemberProductList.find((teamMemberProduct) => teamMemberProduct.product_id === product_id && teamMember_id === teamMember_id);\n        if(singleTeamMemberProduct) {\n            return singleTeamMemberProduct;\n        } else {\n            if(index === 0) {\n                return getTeamMemberProductList(product_id, teamMember_id, 1);\n            } else {\n                return null;\n            }\n        }\n    } else {\n        teamMemberProductList = await TeamMemberProduct.find()\n            .exec();\n        setCache('teamMemberProductList', teamMemberProductList);\n        return getTeamMemberProductList(product_id, teamMember_id, 1);\n    }\n}\n\nexport async function getBookingOrder(req, res) {\n    try {\n\n        let startDayDateTime = moment()\n            .tz('Asia/Kolkata')\n            .startOf('day')\n            .format();\n        let endDayDateTime = moment()\n            .tz('Asia/Kolkata')\n            .endOf('day')\n            .format();\n        let NormalDateStartDateTime = new Date(startDayDateTime);\n        let NormalDateEndDateTime = new Date(endDayDateTime);\n\n        let responseObject = {\n            runningOrder: [],\n            runningLate: [],\n            recentOrders: []\n        };\n\n        let recentOrders = await Booking.find({\n            status: 'waiting',\n            bookingEndTime: {\n                $gte: NormalDateStartDateTime.toUTCString(),\n                $lte: NormalDateEndDateTime.toUTCString()\n            }\n        }, {teamWiseProductList: 0})\n            .sort({bookingStartTime: 1})\n            .exec();\n\n        let runningOrders = await Booking.find({\n            status: 'process',\n            bookingEndTime: {\n                $gte: NormalDateStartDateTime.toUTCString(),\n                $lte: NormalDateEndDateTime.toUTCString()\n            }\n        }, {teamWiseProductList: 0})\n            .sort({bookingStartTime: 1})\n            .exec();\n\n        let lateOrders = await Booking.find({\n            status: 'late',\n            bookingEndTime: {\n                $gte: NormalDateStartDateTime.toUTCString(),\n                $lte: NormalDateEndDateTime.toUTCString()\n            }\n        }, {teamWiseProductList: 0})\n            .sort({bookingStartTime: 1})\n            .exec();\n\n        responseObject.recentOrders = recentOrders;\n        responseObject.runningLate = lateOrders;\n        responseObject.runningOrder = runningOrders;\n\n        res.status(200)\n            .json(responseObject);\n\n    } catch(error) {\n        console.log(error);\n    }\n}\n\nexport async function updateBookingOrder(req, res) {\n    try {\n\n        let orderId = req.params.orderId;\n        let orderType = req.body.orderType;\n\n        let status = 'process';\n        let column = 'running';\n        let message = 'running';\n\n        if(orderType === 'finish') {\n            status = 'finish';\n            column = 'finish';\n            message = 'finish';\n        }\n\n        let currentTime = moment.tz('Asia/Kolkata')\n            .format();\n        let currentDate = new Date(currentTime);\n        let statusDateTime = currentDate.toUTCString();\n\n        let updateResult = await Booking.update({id: orderId}, {\n            status: status,\n            column: column,\n            statusDateTime: statusDateTime\n        })\n            .exec();\n\n        if(updateResult) {\n            if(updateResult.nModified === 1 || updateResult.n === 1) {\n\n                let sodPublishMessage = {\n                    message: message,\n                    data: {\n                        id: orderId,\n                        orderType: orderType,\n                        status: status,\n                        column: column,\n                        statusDateTime: statusDateTime\n                    }\n                };\n                await socketPublishMessage('SOD', sodPublishMessage);\n\n                let _singleLateBooking = await Booking.findOne({id: orderId})\n                    .exec();\n\n                //TODO send to teamMember\n                _singleLateBooking.teamWiseProductList.forEach(async(singleTeamWiseProductList) => {\n                    await socketPublishMessage(singleTeamWiseProductList.id, sodPublishMessage);\n                });\n\n                res.status(200)\n                    .json({result: true});\n\n            } else {\n                res.status(200)\n                    .json({result: false});\n                console.log(updateResult);\n            }\n        } else {\n            console.log('contact to developer');\n        }\n\n    } catch(error) {\n        console.log(error);\n    }\n}\n\nexport async function getTeamMemberBookingOrder(req, res) {\n    try {\n\n        let teamMemberId = req.params.teamMemberId;\n        let startDayDateTime = moment()\n            .tz('Asia/Kolkata')\n            .startOf('day')\n            .format();\n        let endDayDateTime = moment()\n            .tz('Asia/Kolkata')\n            .endOf('day')\n            .format();\n        let NormalDateStartDateTime = new Date(startDayDateTime);\n        let NormalDateEndDateTime = new Date(endDayDateTime);\n\n        let responseObject = {\n            runningOrder: [],\n            runningLate: [],\n            recentOrders: []\n        };\n\n        let recentOrders = await Booking.find({\n            status: 'waiting',\n            bookingEndTime: {\n                $gte: NormalDateStartDateTime.toUTCString(),\n                $lte: NormalDateEndDateTime.toUTCString()\n            },\n            teamWiseProductList: {\n                $elemMatch: {\n                    id: teamMemberId,\n                    orderStatus: false\n                }\n            }\n        })\n            .sort({bookingStartTime: 1})\n            .exec();\n\n        let runningOrders = await Booking.find({\n            status: 'process',\n            bookingEndTime: {\n                $gte: NormalDateStartDateTime.toUTCString(),\n                $lte: NormalDateEndDateTime.toUTCString()\n            },\n            teamWiseProductList: {\n                $elemMatch: {\n                    id: teamMemberId,\n                    orderStatus: false\n                }\n            }\n        })\n            .sort({bookingStartTime: 1})\n            .exec();\n\n        let lateOrders = await Booking.find({\n            status: 'late',\n            bookingEndTime: {\n                $gte: NormalDateStartDateTime.toUTCString(),\n                $lte: NormalDateEndDateTime.toUTCString()\n            },\n            teamWiseProductList: {\n                $elemMatch: {\n                    id: teamMemberId,\n                    orderStatus: false\n                }\n            }\n        })\n            .sort({bookingStartTime: 1})\n            .exec();\n\n        responseObject.recentOrders = recentOrders;\n        responseObject.runningLate = lateOrders;\n        responseObject.runningOrder = runningOrders;\n\n        res.status(200)\n            .json(responseObject);\n\n\n    } catch(error) {\n        console.log(error);\n    }\n}\n"]}