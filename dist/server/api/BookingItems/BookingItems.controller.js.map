{"version":3,"sources":["api/BookingItems/BookingItems.controller.js"],"names":["index","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","exec","catch","findById","params","id","body","_id","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"BookingItems.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/BookingItems              ->  index\r\n * POST    /api/BookingItems              ->  create\r\n * GET     /api/BookingItems/:id          ->  show\r\n * PUT     /api/BookingItems/:id          ->  upsert\r\n * PATCH   /api/BookingItems/:id          ->  patch\r\n * DELETE  /api/BookingItems/:id          ->  destroy\r\n */\r\n\r\nimport { applyPatch } from 'fast-json-patch';\r\nimport BookingItems from './BookingItems.model';\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n    statusCode = statusCode || 200;\r\n    return function(entity) {\r\n        if(entity) {\r\n            return res.status(statusCode).json(entity);\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nfunction patchUpdates(patches) {\r\n    return function(entity) {\r\n        try {\r\n            applyPatch(entity, patches, /*validate*/ true);\r\n        } catch(err) {\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        return entity.save();\r\n    };\r\n}\r\n\r\nfunction removeEntity(res) {\r\n    return function(entity) {\r\n        if(entity) {\r\n            return entity.remove()\r\n                .then(() => res.status(204).end());\r\n        }\r\n    };\r\n}\r\n\r\nfunction handleEntityNotFound(res) {\r\n    return function(entity) {\r\n        if(!entity) {\r\n            res.status(404).end();\r\n            return null;\r\n        }\r\n        return entity;\r\n    };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n    statusCode = statusCode || 500;\r\n    return function(err) {\r\n        res.status(statusCode).send(err);\r\n    };\r\n}\r\n\r\n// Gets a list of BookingItemss\r\nexport function index(req, res) {\r\n    return BookingItems.find().exec()\r\n        .then(respondWithResult(res))\r\n        .catch(handleError(res));\r\n}\r\n\r\n// Gets a single BookingItems from the DB\r\nexport function show(req, res) {\r\n    return BookingItems.findById(req.params.id).exec()\r\n        .then(handleEntityNotFound(res))\r\n        .then(respondWithResult(res))\r\n        .catch(handleError(res));\r\n}\r\n\r\n// Creates a new BookingItems in the DB\r\nexport function create(req, res) {\r\n    return BookingItems.create(req.body)\r\n        .then(respondWithResult(res, 201))\r\n        .catch(handleError(res));\r\n}\r\n\r\n// Upserts the given BookingItems in the DB at the specified ID\r\nexport function upsert(req, res) {\r\n    if(req.body._id) {\r\n        Reflect.deleteProperty(req.body, '_id');\r\n    }\r\n    return BookingItems.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\r\n        .then(respondWithResult(res))\r\n        .catch(handleError(res));\r\n}\r\n\r\n// Updates an existing BookingItems in the DB\r\nexport function patch(req, res) {\r\n    if(req.body._id) {\r\n        Reflect.deleteProperty(req.body, '_id');\r\n    }\r\n    return BookingItems.findById(req.params.id).exec()\r\n        .then(handleEntityNotFound(res))\r\n        .then(patchUpdates(req.body))\r\n        .then(respondWithResult(res))\r\n        .catch(handleError(res));\r\n}\r\n\r\n// Deletes a BookingItems from the DB\r\nexport function destroy(req, res) {\r\n    return BookingItems.findById(req.params.id).exec()\r\n        .then(handleEntityNotFound(res))\r\n        .then(removeEntity(res))\r\n        .catch(handleError(res));\r\n}\r\n"]}