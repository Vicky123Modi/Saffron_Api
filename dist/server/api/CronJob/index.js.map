{"version":3,"sources":["api/CronJob/index.js"],"names":["moment","require","_","setInterval","startDayDateTime","tz","startOf","format","NormalDateStartDateTime","Date","currentTime","currentDate","_LateBooking","find","status","column","bookingStartTime","$gte","toUTCString","$lte","exec","all","map","singleBooking","statusDateTime","updateResult","update","id","nModified","n","_singleLateBooking","singleLateBooking","sodPublishMessage","message","data","_id","customer_id","customerName","basket","total","bookingDateTime","bookingEndTime","teamWiseProductList","singleObject","publishMessage","productItem","console","log","error","hours","getHours","minutes","getMinutes","__v","then","timeSlotList","err","forEach","singleTimeSlot","split","start_time","NormalStartDateTime","getFullYear","getMonth","getDate","BookingAdd","visited","save","InsertBooking"],"mappings":"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","file":"index.js","sourcesContent":["import Booking from '../Booking/Booking.model';\nimport TimeSlot from '../TimeSlot/TimeSlot.model';\nimport {socketPublishMessage} from '../Socket/index';\nimport {getGuid} from '../../config/commonHelper';\n\nlet moment = require('moment-timezone');\nvar _ = require('lodash');\n\n//todo find running late orders\nsetInterval(async () => {\n    try {\n\n        let startDayDateTime = moment().tz('Asia/Kolkata').startOf('day').format();\n        let NormalDateStartDateTime = new Date(startDayDateTime);\n        let currentTime = moment.tz('Asia/Kolkata').format();\n        let currentDate = new Date(currentTime);\n\n        let _LateBooking = await Booking.find({\n            status: 'waiting',\n            column: 'recent orders',\n            bookingStartTime: {\n                $gte: NormalDateStartDateTime.toUTCString(),\n                $lte: currentDate.toUTCString()\n            }\n        })\n            .exec();\n\n        await Promise.all(_LateBooking.map(async (singleBooking) => {\n            let statusDateTime = currentDate.toUTCString();\n\n            let updateResult = await Booking.update({id: singleBooking.id}, {\n                status: 'late',\n                column: 'running late',\n                statusDateTime: statusDateTime\n            })\n                .exec();\n\n            if (updateResult) {\n                if (updateResult.nModified === 1 || updateResult.n === 1) {\n\n                    let _singleLateBooking = _LateBooking.find((singleLateBooking) => singleLateBooking.id === singleBooking.id);\n\n                    let sodPublishMessage = {\n                        message: 'running late',\n                        data: {\n                            _id: _singleLateBooking._id,\n                            id: _singleLateBooking.id,\n                            customer_id: _singleLateBooking.customer_id,\n                            customerName: _singleLateBooking.customerName,\n                            basket: _singleLateBooking.basket,\n                            //teamWiseProductList: _singleLateBooking.teamWiseProductList,\n                            total: _singleLateBooking.total,\n                            bookingDateTime: _singleLateBooking.bookingDateTime,\n                            bookingStartTime: _singleLateBooking.bookingStartTime,\n                            bookingEndTime: _singleLateBooking.bookingEndTime,\n                            status: 'late',\n                            column: 'running late',\n                            statusDateTime: statusDateTime\n                        }\n                    };\n                    await socketPublishMessage('SOD', sodPublishMessage);\n\n                    //ToDO send to TeamMember\n                    _singleLateBooking.teamWiseProductList.map(async (singleObject) => {\n                        let publishMessage = {\n                            message: 'running late',\n                            data: {\n                                _id: _singleLateBooking._id,\n                                id: _singleLateBooking.id,\n                                customer_id: _singleLateBooking.customer_id,\n                                customerName: _singleLateBooking.customerName,\n                                basket: singleObject.productItem,\n                                total: _singleLateBooking.total,\n                                bookingDateTime: _singleLateBooking.bookingDateTime,\n                                bookingStartTime: _singleLateBooking.bookingStartTime,\n                                bookingEndTime: _singleLateBooking.bookingEndTime,\n                                status: 'late',\n                                column: 'running late',\n                                statusDateTime: statusDateTime\n                            }\n                        };\n                        await socketPublishMessage(singleObject.id, publishMessage);\n                    });\n\n\n                } else {\n                    console.log(updateResult);\n                }\n            } else {\n                console.log('contact to developer');\n            }\n\n        }));\n\n    } catch (error) {\n        console.log(error);\n    }\n\n}, 10000);\n\nsetInterval(async () => {\n\n    let currentTime = moment.tz('Asia/Kolkata').format();\n    let currentDate = new Date(currentTime);\n    let hours = currentDate.getHours();\n    let minutes = currentDate.getMinutes();\n\n    if (hours === 10 && minutes === 24) {\n        TimeSlot.find({}, {__v: 0, _id: 0}).then(async (timeSlotList, err) => {\n            if (!err) {\n\n                timeSlotList.forEach(async (singleTimeSlot) => {\n                    let split = singleTimeSlot.start_time.split(\":\");\n                    let NormalStartDateTime = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), split[0], split[1], 0);\n                    let BookingAdd = new Booking({\n                        id: getGuid(),\n                        customer_id: 10000000,\n                        basket: {},\n                        teamWiseProductList: {},\n                        total: 0,\n                        bookingDateTime: currentDate.toUTCString(),\n                        bookingStartTime: NormalStartDateTime.toUTCString(),\n                        bookingEndTime: NormalStartDateTime.toUTCString(),\n                        status: 'first Order',\n                        column: 'first Order',\n                        customerName: 'Developer Test',\n                        visited: false,\n                        statusDateTime: currentDate.toUTCString()\n                    });\n                    await BookingAdd.save().then(async function (InsertBooking, err) {\n                        if (!err) {\n                            if (InsertBooking) {\n                                console.log(\"Save successfully\");\n                            } else {\n                                console.log(InsertBooking);\n                            }\n                        } else {\n                            console.log(err);\n                        }\n                    });\n                });\n\n            } else {\n                console.log(err);\n            }\n        });\n    }\n\n}, 60000);\n\n\n\n"]}