{"version":3,"sources":["api/SliderImages/SliderImages.controller.js"],"names":["index","addNewSliderImage","deleteSliderImage","formidable","require","fs","fs_extra","isImage","respondWithResult","res","statusCode","entity","status","json","handleError","err","send","req","find","exec","then","catch","next","form","IncomingForm","parse","fields","files","length","filetoupload","name","uuid","oldpath","path","newpath","dbpath","renameFilePath","move","toString","rename","SliderImageNewAdd","id","image_url","save","InsertSlider","data","result","Error","params","sliderImageId","remove","DeleteSliderImage","n"],"mappings":"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","file":"SliderImages.controller.js","sourcesContent":["import SliderImages from './SliderImages.model';\r\nimport {errorJsonResponse, SliderImageUploadLocation, getGuid} from '../../config/commonHelper';\r\n\r\nvar formidable = require('formidable');\r\nvar fs = require('fs');\r\nvar fs_extra = require('fs-extra');\r\nconst isImage = require('is-image');\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n    statusCode = statusCode || 200;\r\n    return function (entity) {\r\n        if (entity) {\r\n            return res.status(statusCode).json(entity);\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n    statusCode = statusCode || 500;\r\n    return function (err) {\r\n        res.status(statusCode).send(err);\r\n    };\r\n}\r\n\r\n// Gets a list of SliderImagess\r\nexport function index(req, res) {\r\n    return SliderImages.find().exec()\r\n        .then(respondWithResult(res))\r\n        .catch(handleError(res));\r\n}\r\n\r\n// Add New SliderImagess\r\nexport function addNewSliderImage(req, res, next) {\r\n    try {\r\n\r\n        let form = new formidable.IncomingForm();\r\n        form.parse(req, function (err, fields, files) {\r\n            if (Object.keys(files).length > 0 && isImage(files.filetoupload.name)) {\r\n                let uuid = getGuid();\r\n                let oldpath = files.filetoupload.path;\r\n                let newpath = SliderImageUploadLocation.path + files.filetoupload.name;\r\n                let dbpath = SliderImageUploadLocation.dbpath + uuid + files.filetoupload.name;\r\n                let renameFilePath = SliderImageUploadLocation.path + uuid + files.filetoupload.name;\r\n\r\n                fs_extra.move(oldpath, newpath, function (err) {\r\n                    if (err) {\r\n                        res.status(400)\r\n                            .json(errorJsonResponse(err.toString(), \"Same Name Image Already Available On Server\"));\r\n                    } else {\r\n                        fs.rename(newpath, renameFilePath, function (err) {\r\n                            if (err) {\r\n                                res.status(400).json(errorJsonResponse(err.toString(), \"Fail to Rename file\"));\r\n                            } else {\r\n                                let SliderImageNewAdd = new SliderImages({\r\n                                    id: getGuid(),\r\n                                    image_url: dbpath\r\n                                });\r\n                                SliderImageNewAdd.save()\r\n                                    .then(function (InsertSlider, err) {\r\n                                        if (!err) {\r\n                                            if (InsertSlider) {\r\n                                                res.status(200)\r\n                                                    .json({\r\n                                                        data: InsertSlider,\r\n                                                        result: \"Save Successfully\"\r\n                                                    });\r\n                                            } else {\r\n                                                res.status(400)\r\n                                                    .json(errorJsonResponse(\"Error in db response\", \"Invalid_Image\"));\r\n                                            }\r\n                                        } else {\r\n                                            res.status(400)\r\n                                                .json(errorJsonResponse(err, \"Contact to your Developer\"));\r\n                                        }\r\n                                    });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n            } else {\r\n                res.status(400).json(errorJsonResponse(\"Invalid Request\", \"Invalid Request\"));\r\n            }\r\n        });\r\n    }\r\n    catch (Error) {\r\n        res.status(400).json(errorJsonResponse(Error.toString(), \"Invalid Image\"));\r\n    }\r\n}\r\n\r\nexport function deleteSliderImage(req, res) {\r\n    if (req.params.sliderImageId) {\r\n        let sliderImageId = req.params.sliderImageId;\r\n        SliderImages.remove({id: sliderImageId})\r\n            .exec(function (err, DeleteSliderImage) {\r\n                if (!err) {\r\n                    if (DeleteSliderImage) {\r\n                        if (DeleteSliderImage.result.n === 1) {\r\n                            res.status(200)\r\n                                .json({id: sliderImageId, result: \"Deleted Successfully\"});\r\n                        } else {\r\n                            res.status(400)\r\n                                .json(errorJsonResponse(\"Deleted Fail\", \"Deleted Fail\"));\r\n                        }\r\n                    } else {\r\n                        res.status(400)\r\n                            .json(errorJsonResponse(\"Invalid Post\", \"Invalid Post\"));\r\n                    }\r\n                } else {\r\n                    res.status(400)\r\n                        .json(errorJsonResponse(err, \"Contact to your Developer\"));\r\n                }\r\n            });\r\n    } else {\r\n        res.status(400)\r\n            .json(errorJsonResponse(\"Id is required\", \"Id is required\"));\r\n    }\r\n}\r\n"]}