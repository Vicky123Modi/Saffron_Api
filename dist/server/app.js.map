{"version":3,"sources":["app.js"],"names":["Promise","require","https","fs","swaggerUi","connect","mongo","uri","useMongoClient","connection","on","err","console","error","process","exit","app","log","__dirname","use","static","privateKey","readFileSync","toString","certificate","ca","credentials","key","cert","requestCert","rejectUnauthorized","server","createServer","startServer","angularFullstack","listen","port","ip","get","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;;;AACA;;;;AAGA;;;;AACA;;AAGA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAVA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;AAIA;;;AAQA;AACA,IAAIC,QAAQD,QAAQ,OAAR,CAAZ;AACA,MAAME,KAAKF,QAAQ,IAAR,CAAX;AACA,MAAMG,YAAYH,QAAQ,oBAAR,CAAlB;;AAEA;AACA;;;AAIA,mBAASI,OAAT,CAAiB,sBAAOC,KAAP,CAAaC,GAA9B,EAAmC,EAACC,gBAAgB,IAAjB,EAAnC;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAAUC,GAAV,EAAe;AAC3CC,YAAQC,KAAR,CAAe,6BAA4BF,GAAI,EAA/C;AACAG,YAAQC,IAAR,CAAa,CAAC,CAAd,EAF2C,CAEzB;AACrB,CAHD;;AAKA;;AAEA;AACA,IAAIC,MAAM,wBAAV;AACAJ,QAAQK,GAAR,CAAYC,SAAZ;AACAF,IAAIG,GAAJ,CAAQ,qBAAR;AACAH,IAAIG,GAAJ,CAAQ,SAAR,EAAmB,kBAAQC,MAAR,CAAeF,YAAY,SAA3B,CAAnB;;AAEA;AACA;;;AAGA,IAAIG,aAAalB,GAAGmB,YAAH,CAAgB,gBAAhB,EAAkCC,QAAlC,EAAjB;AACA,IAAIC,cAAcrB,GAAGmB,YAAH,CAAgB,gBAAhB,EAAkCC,QAAlC,EAAlB;AACA,IAAIE,KAAKtB,GAAGmB,YAAH,CAAgB,YAAhB,EAA8BC,QAA9B,EAAT;AACA,IAAIG,cAAc;AACdC,SAAKN,UADS,EACGO,MAAMJ,WADT;AAEdK,iBAAa,KAFC;AAGdC,wBAAoB;AAHN,CAAlB;;AAMA,IAAIC,SAAS7B,MAAM8B,YAAN,CAAmBN,WAAnB,EAAgCV,GAAhC,CAAb;AACA;;AAEA,wBAAWe,MAAX;AACAnB,QAAQK,GAAR,CAAY,wCAAZ;AACA,uBAAcD,GAAd;AACA,sBAAeA,GAAf;;AAEA;AACA,SAASiB,WAAT,GAAuB;AACnBjB,QAAIkB,gBAAJ,GAAuBH,OAAOI,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,EAAsC,YAAY;AACrEzB,gBAAQK,GAAR,CAAY,4CAAZ,EAA0D,sBAAOmB,IAAjE,EAAuEpB,IAAIsB,GAAJ,CAAQ,KAAR,CAAvE;AACH,KAFsB,CAAvB;AAGH;;AAGD,4BAAaL,WAAb;;AAEA;AACAM,UAAUC,OAAOD,OAAP,GAAiBvB,GAA3B","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nimport express from 'express';\nimport mongoose from 'mongoose';\n\nmongoose.Promise = require('bluebird');\nimport config from './config/environment';\nimport '../server/api/CronJob/index';\n\n//import http from 'http';\nimport cors from 'cors';\n\nimport expressConfig from './config/express';\nimport registerRoutes from './routes';\nimport seedDatabaseIfNeeded from './config/seed';\nimport {socketOpen} from '../server/api/Socket';\n\n//const http2 = require('http2');\nlet https = require('https');\nconst fs = require('fs');\nconst swaggerUi = require('swagger-ui-express');\n\n//todo Swagger\n//const swaggerDocument = require('./swagger.json');\n\n\n\nmongoose.connect(config.mongo.uri, {useMongoClient: true});\nmongoose.connection.on('error', function (err) {\n    console.error(`MongoDB connection error: ${err}`);\n    process.exit(-1); // eslint-disable-line no-process-exit\n});\n\nseedDatabaseIfNeeded();\n\n// Setup server\nlet app = express();\nconsole.log(__dirname);\napp.use(cors());\napp.use('/images', express.static(__dirname + '/images'));\n\n//todo Swagger\n//app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\n\nvar privateKey = fs.readFileSync('server-key.pem').toString();\nvar certificate = fs.readFileSync('server-crt.pem').toString();\nvar ca = fs.readFileSync('ca-crt.pem').toString();\nvar credentials = {\n    key: privateKey, cert: certificate,\n    requestCert: false,\n    rejectUnauthorized: true\n};\n\nlet server = https.createServer(credentials, app);\n//server.setSecure(credentials);\n\nsocketOpen(server);\nconsole.log(\"socket connection successfully created\");\nexpressConfig(app);\nregisterRoutes(app);\n\n// Start server\nfunction startServer() {\n    app.angularFullstack = server.listen(config.port, config.ip, function () {\n        console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n    });\n}\n\n\nsetImmediate(startServer);\n\n// Expose app\nexports = module.exports = app;\n"]}